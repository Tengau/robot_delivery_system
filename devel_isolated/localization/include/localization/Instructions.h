// Generated by gencpp from file localization/Instructions.msg
// DO NOT EDIT!


#ifndef LOCALIZATION_MESSAGE_INSTRUCTIONS_H
#define LOCALIZATION_MESSAGE_INSTRUCTIONS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <localization/Instruction.h>

namespace localization
{
template <class ContainerAllocator>
struct Instructions_
{
  typedef Instructions_<ContainerAllocator> Type;

  Instructions_()
    : instructions()  {
    }
  Instructions_(const ContainerAllocator& _alloc)
    : instructions(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::localization::Instruction_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::localization::Instruction_<ContainerAllocator> >> _instructions_type;
  _instructions_type instructions;





  typedef boost::shared_ptr< ::localization::Instructions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localization::Instructions_<ContainerAllocator> const> ConstPtr;

}; // struct Instructions_

typedef ::localization::Instructions_<std::allocator<void> > Instructions;

typedef boost::shared_ptr< ::localization::Instructions > InstructionsPtr;
typedef boost::shared_ptr< ::localization::Instructions const> InstructionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localization::Instructions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localization::Instructions_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::localization::Instructions_<ContainerAllocator1> & lhs, const ::localization::Instructions_<ContainerAllocator2> & rhs)
{
  return lhs.instructions == rhs.instructions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::localization::Instructions_<ContainerAllocator1> & lhs, const ::localization::Instructions_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::localization::Instructions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization::Instructions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization::Instructions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization::Instructions_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization::Instructions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization::Instructions_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localization::Instructions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f704a970ca19812bcb8e91d7be98e4b3";
  }

  static const char* value(const ::localization::Instructions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf704a970ca19812bULL;
  static const uint64_t static_value2 = 0xcb8e91d7be98e4b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::localization::Instructions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization/Instructions";
  }

  static const char* value(const ::localization::Instructions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localization::Instructions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Instruction[] instructions\n"
"\n"
"================================================================================\n"
"MSG: localization/Instruction\n"
"int64 from_index\n"
"int64 to_index\n"
"float64 distance\n"
;
  }

  static const char* value(const ::localization::Instructions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localization::Instructions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.instructions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Instructions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localization::Instructions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localization::Instructions_<ContainerAllocator>& v)
  {
    s << indent << "instructions[]" << std::endl;
    for (size_t i = 0; i < v.instructions.size(); ++i)
    {
      s << indent << "  instructions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::localization::Instruction_<ContainerAllocator> >::stream(s, indent + "    ", v.instructions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATION_MESSAGE_INSTRUCTIONS_H
