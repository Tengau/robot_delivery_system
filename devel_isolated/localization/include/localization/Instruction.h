// Generated by gencpp from file localization/Instruction.msg
// DO NOT EDIT!


#ifndef LOCALIZATION_MESSAGE_INSTRUCTION_H
#define LOCALIZATION_MESSAGE_INSTRUCTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace localization
{
template <class ContainerAllocator>
struct Instruction_
{
  typedef Instruction_<ContainerAllocator> Type;

  Instruction_()
    : from_index(0)
    , to_index(0)
    , distance(0.0)  {
    }
  Instruction_(const ContainerAllocator& _alloc)
    : from_index(0)
    , to_index(0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _from_index_type;
  _from_index_type from_index;

   typedef int64_t _to_index_type;
  _to_index_type to_index;

   typedef double _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::localization::Instruction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localization::Instruction_<ContainerAllocator> const> ConstPtr;

}; // struct Instruction_

typedef ::localization::Instruction_<std::allocator<void> > Instruction;

typedef boost::shared_ptr< ::localization::Instruction > InstructionPtr;
typedef boost::shared_ptr< ::localization::Instruction const> InstructionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localization::Instruction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localization::Instruction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::localization::Instruction_<ContainerAllocator1> & lhs, const ::localization::Instruction_<ContainerAllocator2> & rhs)
{
  return lhs.from_index == rhs.from_index &&
    lhs.to_index == rhs.to_index &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::localization::Instruction_<ContainerAllocator1> & lhs, const ::localization::Instruction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::localization::Instruction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization::Instruction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization::Instruction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization::Instruction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization::Instruction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization::Instruction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localization::Instruction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e367e05ce4cf725a4081bd527e66bfca";
  }

  static const char* value(const ::localization::Instruction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe367e05ce4cf725aULL;
  static const uint64_t static_value2 = 0x4081bd527e66bfcaULL;
};

template<class ContainerAllocator>
struct DataType< ::localization::Instruction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization/Instruction";
  }

  static const char* value(const ::localization::Instruction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localization::Instruction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 from_index\n"
"int64 to_index\n"
"float64 distance\n"
;
  }

  static const char* value(const ::localization::Instruction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localization::Instruction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.from_index);
      stream.next(m.to_index);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Instruction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localization::Instruction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localization::Instruction_<ContainerAllocator>& v)
  {
    s << indent << "from_index: ";
    Printer<int64_t>::stream(s, indent + "  ", v.from_index);
    s << indent << "to_index: ";
    Printer<int64_t>::stream(s, indent + "  ", v.to_index);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATION_MESSAGE_INSTRUCTION_H
